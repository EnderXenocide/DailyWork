/*********************************************************************
 * Name:      	main.h
 * Purpose:   	Declares simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is declared in
 * 				gui.h source file which is generated by wxFormBuilder.
 *********************************************************************/

#ifndef __main__
#define __main__


#include "dailyworkparser.h"
#include "currentdates.h"
#include "gui2.h"

// main wxWidgets header file
//#include <wx/wx.h>
#include <wx/string.h>
#include <wx/treectrl.h>
#include <wx/msgdlg.h>
#include <wx/cmdline.h>

#if wxUSE_HELP
#include <wx/cshelp.h>
#endif

#if USE_RICH_EDIT
#include <wx/richtext/richtextctrl.h>
#include <wx/richtext/richtextstyles.h>
#include <wx/richtext/richtextxml.h>
#include <wx/richtext/richtexthtml.h>
#include <wx/richtext/richtextformatdlg.h>
#include <wx/richtext/richtextsymboldlg.h>
#include <wx/richtext/richtextstyledlg.h>
#include <wx/richtext/richtextprint.h>
#include <wx/richtext/richtextimagedlg.h>
#endif


////////////////////////////////////////////////////////////////////////////////
// application class declaration 
////////////////////////////////////////////////////////////////////////////////

class MainApp : public wxApp
{
public:
     MainFrame* frame; 
     
     MainApp() { m_language = wxLANGUAGE_UNKNOWN; };

    virtual bool OnInit();
    virtual int OnExit();
    
    void CreateStyles();
    void InitDailyWorkParser();
    void LoadFavoritesInComboBox();
    void LoadDailyWorkInTree();
    MainApp& SetHierarchicalTree(bool hierarchy) {this->hierarchicalTree = hierarchy; return *this; }
    bool IsHierarchicalTree() const{ return hierarchicalTree; }
#if USE_RICH_EDIT
    wxRichTextStyleSheet* GetStyleSheet() const { return m_styleSheet; } 
#endif    
    int AddDateToTree(const wxDateTime& date, bool selectItem = false); // todo wxTreeCtrl& tree instead
    wxTreeItemId AddItem(wxTreeItemId parent, wxString text, wxDateTime date, bool setDataEmpty);
    void SetCurrentDate(const wxDateTime &date, wxWindow *sender);
    void SetCurrentDateFromTreeDatesSelection();
    void SetCurrentDateFromTreeSearchSelection();  
    void SetPrevDateAsCurrentDate();
    void SetNextDateAsCurrentDate();  
    void AddTomorrowToTree();
    void AddYesterdayToTree();    
    wxDateTime GetDateFromTreeDatesSelection();
    wxString GetCurrentDateWork();
    void DeleteDateSelected();
    bool DeleteItemData(wxTreeItemId itemId);
    bool IsModified() const { return dwparser.IsModified(); }
    int Save() ;
    int SaveAs(wxString filename) ;
    int AddToFavorites(wxString text);
    int DeleteSelectedFavorite();
    void UpdateCurrentWork();
    int CountDates();
    int SearchInDates(wxString text);
    bool SelectFirstTreeDatesItem();
    ExcludedDays GetExcludedDays();
    void SetExcludedDays(ExcludedDays ed);
    void OnInitCmdLine(wxCmdLineParser& parser);
    bool OnCmdLineParsed(wxCmdLineParser& parser);    
private:
    wxDateTime GetDateFromTreeSelection(wxTreeCtrl* tree);
    wxDateTime GetDateFromItem(wxTreeCtrl* tree, wxTreeItemId itemId);
    //void DeleteDate(wxDateTime date);
    CurrentDates currentDates;
    bool hierarchicalTree;
    wxLanguage m_language;  // language specified by user
    wxLocale* m_locale;  // locale we'll be using
    DailyWorkParser dwparser; 
    ExcludedDays excludedDays;
    void InitLanguageSupport();
    //wxLanguage GetUsersFavoriteLanguageOrDefault();
     wxTreeItemId AddItemData(wxTreeItemId itemId, wxDateTime date, bool setDataEmpty);
    void SelectDateInTree(const wxDateTime &date);
    wxTreeItemId SelectDateInChild(wxTreeItemId parent, wxDateTime date);
    wxTreeItemId AddBranchHierarchy(wxTreeItemId rootId, wxDateTime date);
    wxTreeItemId AddBranchSimple(wxTreeItemId rootId, wxDateTime date);
    void GetWorkDatesAround(const wxDateTime &date, wxDateTime &prevDate, wxDateTime &nextDate);
    void SetButtonsState();
    void SetEmptyWorkSpace();
 #if USE_RICH_EDIT   
    wxRichTextStyleSheet*   m_styleSheet;
    void InitRichText(); 
#endif 

};

static const wxCmdLineEntryDesc g_cmdLineDesc [] =
{
     { wxCMD_LINE_SWITCH, "h", "help", "displays help on the command line parameters1",
          wxCMD_LINE_VAL_NONE, wxCMD_LINE_OPTION_HELP },
     { wxCMD_LINE_OPTION, "l", "lang", "Users Favorite Language"},
     { wxCMD_LINE_OPTION, "d", "data", "specify data filename to use"},
 
     { wxCMD_LINE_NONE }
};

// declare global static function wxGetApp()
DECLARE_APP(MainApp)

#endif //__main__
